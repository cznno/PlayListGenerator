import java.util.*;

public class Main {

    public static void main(String[] args) {

        //input
        Ad ad_0 = new Ad(0, 110, 0, 86400);

        Ad ad_1 = new Ad(1, 150, 18000, 72000, 12);
        Ad ad_2 = new Ad(2, 100, 36000, 57600, 20);
        Ad ad_3 = new Ad(3, 180, 54000, 72000, 25);
//        Ad ad_3 = new Ad(3, 60, 46800, 82800);

        List<Ad> adList = new ArrayList<Ad>();
        adList.add(ad_1);
        adList.add(ad_2);
        adList.add(ad_3);
//        adList.add(ad_3);

        //validation
        //set section

//        Collections.sort(sectionPoints);
//        System.out.println(sectionPoints);
        List<Section> sectionList = getSectionList(adList);
        System.out.println(sorting(sectionList.get(0), adList));
        System.out.println(sorting(sectionList.get(1), adList));
        System.out.println(sorting(sectionList.get(2), adList));
        System.out.println(sorting(sectionList.get(3), adList));
//        int[] sectionAds_0 = {1};
//        int[] sectionAds_1 = {1, 2};
//        int[] sectionAds_2 = {1, 2, 3};
//        int[] sectionAds_3 = {1, 3};
//
//        Section section_0 = new Section(sectionAds_0, 18000, 36000);
//        Section section_1 = new Section(sectionAds_1, 36000, 54000);
//        Section section_2 = new Section(sectionAds_2, 54000, 57600);
//        Section section_3 = new Section(sectionAds_3, 57600, 72000);
//
//        Map<Integer, Integer> adWeightSection_0 = new HashMap<>();
//        adWeightSection_0.put(1, (int) Math.ceil((float) (section_0.getEnd() - section_0.getStart()) / ((float) (ad_1.getEnd() - ad_1.getStart())) * ad_1.getLoopTimes()));
//
//        Map<Integer, Integer> adWeightSection_1 = new HashMap<>();
//        adWeightSection_1.put(1, (int) Math.ceil(((float) (section_1.getEnd() - section_1.getStart()) / ((float) (ad_1.getEnd() - ad_1.getStart())) * ad_1.getLoopTimes())));
//        adWeightSection_1.put(2, (int) Math.ceil(((float) (section_1.getEnd() - section_1.getStart()) / ((float) (ad_2.getEnd() - ad_2.getStart())) * ad_2.getLoopTimes())));
//
//        Map<Integer, Integer> adWeightSection_2 = new HashMap<>();
//        adWeightSection_2.put(1, (int) Math.ceil(((float) (section_2.getEnd() - section_2.getStart()) / ((float) (ad_1.getEnd() - ad_1.getStart())) * ad_1.getLoopTimes())));
//        adWeightSection_2.put(2, (int) Math.ceil(((float) (section_2.getEnd() - section_2.getStart()) / ((float) (ad_2.getEnd() - ad_2.getStart())) * ad_2.getLoopTimes())));
//        adWeightSection_2.put(3, (int) Math.ceil(((float) (section_2.getEnd() - section_2.getStart()) / ((float) (ad_3.getEnd() - ad_3.getStart())) * ad_3.getLoopTimes())));
//
//        Map<Integer, Integer> adWeightSection_3 = new HashMap<>();
//        adWeightSection_3.put(1, (int) Math.ceil(((float) (section_3.getEnd() - section_3.getStart()) / ((float) (ad_1.getEnd() - ad_1.getStart())) * ad_1.getLoopTimes())));
//        adWeightSection_3.put(3, (int) Math.ceil(((float) (section_3.getEnd() - section_3.getStart()) / ((float) (ad_3.getEnd() - ad_3.getStart())) * ad_3.getLoopTimes())));
//
//        section_0.setAdWeight(adWeightSection_0);
//        section_1.setAdWeight(adWeightSection_1);
//        section_2.setAdWeight(adWeightSection_2);
//        section_3.setAdWeight(adWeightSection_3);
//
//        //sort
//        List<Integer> sortList = new ArrayList<>();
////        System.out.println(sorting(section_2, adList));
////        for (Integer i : sorting(section_0, adList)) {
////            sortList.add(i);
////        }
////        for (Integer i : sorting(section_1, adList)) {
////            sortList.add(i);
////        }
////        for (Integer i : sorting(section_2, adList)) {
////            sortList.add(i);
////        }
////        for (Integer i : sorting(section_3, adList)) {
////            sortList.add(i);
////        }
//        System.out.println(sorting(section_0, adList));
//        System.out.println(sorting(section_1, adList));
//        System.out.println(sorting(section_2, adList));
//        System.out.println(sorting(section_3, adList));
    }


    private static List<Integer> sorting(Section section, List<Ad> adList) {

        Set<Integer> group = new HashSet<>();
        List<Integer> adsOrder = new ArrayList<>();
        Integer totalLength = 0;
        Integer sectionLength = section.getEnd() - section.getStart();
        int totalLoopTimes = 0;
        int remainTimes = 0;

        for (int i : section.getAds()) {
            for (Ad j : adList) {
                if (j.getId() == i) {
                    group.add(j.getId());
//                    totalLength += j.getLength();
                }
            }
        }
//        totalLoopTimes = sectionLength / totalLength;
//        remainTimes = sectionLength % totalLength / 110 + 1;
        int i = 0;
        addAds:
        do {
            for (Map.Entry<Integer, Integer> adWeightMap : section.adWeight.entrySet()) {
                if (adWeightMap.getValue().equals(i))
                    group.remove(adWeightMap.getKey());
            }
//            System.out.println("adlist size:" + adList.size());
            if (group.size() == 0)
                break addAds;
            for (int j : group) {
                adsOrder.add(j);
//                System.out.println("add length:" + adList.get(j - 1).getLength());
                totalLength += adList.get(j - 1).getLength();
            }
            i++;
        } while (totalLength < sectionLength);

        remainTimes = (int) Math.ceil((sectionLength - totalLength) / 110);

        for (i = 0; i <= remainTimes; i++) {
            adsOrder.add(0);
        }
        Collections.shuffle(adsOrder);

        return adsOrder;
    }

    private static List<Section> getSectionList(List<Ad> adList) {

        List<Section> sectionList = new ArrayList<>();

        Set<Integer> sectionPointsSet = new TreeSet<>();
        for (Ad ad : adList) {
            sectionPointsSet.add(ad.getStart());
            sectionPointsSet.add(ad.getEnd());
        }
        Object[] sectionPointList = sectionPointsSet.toArray();

        int sectionSize = sectionPointsSet.size() - 1;
        List<Integer> sectionAds = new ArrayList<>();
        int start = 0;
        int end = 0;
        for (int i = 0; i < sectionSize; i++) {
            start = (int) sectionPointList[i];
            end = (int) sectionPointList[i + 1];
            for (Ad ad : adList) {
                if (!(ad.getStart() >= end || ad.getEnd() <= start)) {
                    sectionAds.add(ad.getId());
                }
            }
            Map<Integer, Integer> adWeight = new HashMap<>();
            for (Integer integer : sectionAds) {
                adWeight.put(integer, (int) Math.ceil((float) (end - start) / ((float) (adList.get(integer-1).getEnd() - adList.get(integer-1).getStart())) * adList.get(integer-1).getLoopTimes()));
            }
            Section section = new Section(sectionAds, start, end, adWeight);
            sectionList.add(section);
        }

        return sectionList;
    }
}
============================

============================
  /*  private static List<Integer> sorting(Section section, List<Ad> adList) {

        Set<Integer> group = new HashSet<>();
        List<Integer> adsOrder = new ArrayList<>();
        Integer totalLength = 0;
        Integer sectionLength = section.getEnd() - section.getStart();
        int totalLoopTimes = 0;
        int remainTimes = 0;

        for (int i : section.getAds()) {
            for (Ad j : adList) {
                if (j.getId() == i) {
                    group.add(j.getId());
                }
            }
        }

        int i = 0;
        addAds:
        do {
            for (Map.Entry<Integer, Integer> adWeightMap : section.adWeight.entrySet()) {
                if (adWeightMap.getValue().equals(i))
                    group.remove(adWeightMap.getKey());
            }
            if (group.size() == 0)
                break addAds;
            for (int j : group) {
                adsOrder.add(j);
                totalLength += adList.get(j - 1).getLength();
            }
            i++;
        } while (totalLength < sectionLength);

        remainTimes = (int) Math.ceil((sectionLength - totalLength) / 110);

        for (i = 0; i <= remainTimes; i++) {
            adsOrder.add(0);
        }
        Collections.shuffle(adsOrder);

        return adsOrder;
    }*/

/*    private static List<Section> getSectionList(List<Ad> adList) {

        List<Section> sectionList = new ArrayList<>();

        Set<Integer> sectionPointsSet = new TreeSet<>();
        for (Ad ad : adList) {
            sectionPointsSet.add(ad.getStart());
            sectionPointsSet.add(ad.getEnd());
        }
        Object[] sectionPointList = sectionPointsSet.toArray();

        int sectionSize = sectionPointsSet.size() - 1;
        List<Integer> sectionAds = new ArrayList<>();
        int sectionStart = 0;
        int sectionEnd = 0;
        int adStart = 0;
        int adEnd = 0;
        int adLoopTimes = 0;
        for (int i = 0; i < sectionSize; i++) {
            sectionStart = (int) sectionPointList[i];
            sectionEnd = (int) sectionPointList[i + 1];
            for (Ad ad : adList) {
                if (!(ad.getStart() >= sectionEnd || ad.getEnd() <= sectionStart)) {
                    sectionAds.add(ad.getId());
                }
            }
            Map<Integer, Integer> adWeight = new HashMap<>();
            for (Integer integer : sectionAds) {
                adStart = adList.get(integer - 1).getStart();
                adEnd = adList.get(integer - 1).getEnd();
                adLoopTimes = adList.get(integer - 1).getLoopTimes();
                if (adStart <= sectionStart && adEnd < sectionEnd) {
                    adWeight.put(integer, (int) Math.ceil((float) ((adEnd - sectionStart) / (adEnd - adStart)) * adLoopTimes));
                } else if (adStart <= sectionStart && adEnd >= sectionEnd) {
                    adWeight.put(integer, (int) Math.ceil((float) ((sectionEnd - adStart) / (adEnd - adStart)) * adLoopTimes));
                } else if (adStart <= sectionStart && adEnd >= sectionEnd) {
                    adWeight.put(integer, (int) Math.ceil((float) ((sectionEnd - sectionStart) / (adEnd - adStart)) * adLoopTimes));
                } else if (adStart >= sectionStart && adEnd <= sectionEnd) {
                    adWeight.put(integer, (int) Math.ceil((float) ((adEnd - adStart) / (adEnd - adStart)) * adLoopTimes));
                } else {
                    System.out.println("ERROR");
                }
//                adWeight.put(integer, (int) Math.ceil((float) (sectionEnd - sectionStart) / ((float) (adList.get(integer - 1).getEnd() - adList.get(integer - 1).getStart())) * adList.get(integer - 1).getLoopTimes()));
            }
            Section section = new Section(sectionAds, sectionStart, sectionEnd, adWeight);
            sectionList.add(section);
        }

        return sectionList;
    }*/
